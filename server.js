// server.js (Complete Version with Login, Manual Viewer, and AI Chatbot)

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const fs = require('fs/promises');
const pdf = require('pdf-parse');
const path = require('path');
const session = require('express-session');

const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require('@google/generative-ai');
const { GoogleGenerativeAIEmbeddings } = require('@langchain/google-genai');
const { MemoryVectorStore } = require('langchain/vectorstores/memory');
const { RecursiveCharacterTextSplitter } = require('langchain/text_splitter');

const app = express();
const port = process.env.PORT || 5500;

// --- User Management ---
const users = [
    { id: 1, username: 'admin', password: 'password123' },
    { id: 2, username: 'user', password: 'password456' }
];

// --- Session Configuration ---
app.use(session({
    secret: 'your_super_secret_key_change_this_in_production',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, maxAge: 60 * 60 * 1000 } // 1 hour
}));

const chatHistories = {};
let vectorStore;

const VECTOR_STORE_SAVE_PATH = path.join(__dirname, 'vector_store.json');

// --- Middleware ---
app.use(cors({
    origin: true,
    credentials: true
}));
app.use(express.json());

// Debug middleware
app.use((req, res, next) => {
    console.log(`[DEBUG] ${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);
    next();
});

// --- Authentication Middleware ---
const checkAuth = (req, res, next) => {
    console.log('[DEBUG] Checking authentication...');
    console.log('[DEBUG] Session ID:', req.session.id);
    console.log('[DEBUG] User ID in session:', req.session.userId);

    if (!req.session.userId) {
        console.log('[DEBUG] User not authenticated, redirecting to login');
        return res.redirect('/login.html');
    }
    
    console.log('[DEBUG] User authenticated, allowing access');
    next();
};

// --- File Upload Configuration ---
const upload = multer({ storage: multer.memoryStorage() });

// --- AI Configuration ---
const safetySettings = [
  { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },
  { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },
  { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_NONE },
  { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_NONE },
];

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const generativeModel = genAI.getGenerativeModel({
  model: 'gemini-2.0-flash',
  safetySettings,
});
const embeddingsModel = new GoogleGenerativeAIEmbeddings({
  apiKey: process.env.GEMINI_API_KEY,
  model: 'text-embedding-004',
});

// --- Vector Store Initialization ---
// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô initializeVectorStore ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ
// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô initializeVectorStore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ batch processing
async function initializeVectorStore() {
  const BATCH_SIZE = 20; // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î batch ‡∏•‡∏á
  const DELAY_BETWEEN_BATCHES = 2000; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á batch
  const MAX_RETRIES = 3; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
  const CHECKPOINT_INTERVAL = 5; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å checkpoint ‡∏ó‡∏∏‡∏Å 5 batches
  
  try {
    console.log(`üîç Checking for saved vector store at: ${VECTOR_STORE_SAVE_PATH}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    try {
      const savedData = await fs.readFile(VECTOR_STORE_SAVE_PATH, 'utf-8');
      const memoryVectors = JSON.parse(savedData);

      if (memoryVectors && memoryVectors.length > 0) {
        const documents = memoryVectors.map(mv => ({ 
          pageContent: mv.content, 
          metadata: mv.metadata 
        }));
        const embeddings = memoryVectors.map(mv => mv.embedding);

        vectorStore = new MemoryVectorStore(embeddingsModel);
        await vectorStore.addVectors(embeddings, documents);

        console.log(`‚úÖ Vector store loaded from disk. Total vectors: ${memoryVectors.length}`);
        return;
      }
    } catch (loadError) {
      console.log('üìö No saved vector store found. Building from scratch...');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á vector store ‡πÉ‡∏´‡∏°‡πà
    await buildVectorStoreFromScratch();
    
  } catch (error) {
    console.error('‚ùå CRITICAL: Vector store initialization failed:', error);
    
    // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    await loadPartialVectorStore();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á vector store ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
async function buildVectorStoreFromScratch() {
  const documentsBasePath = path.join(__dirname, 'documents');
  const allDocuments = [];
  const processedFiles = new Set();

  console.log('üìÅ Starting document processing...');
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ area folders
    const areaFolders = (await fs.readdir(documentsBasePath, { withFileTypes: true }))
      .filter(d => d.isDirectory())
      .map(d => d.name);

    console.log(`üóÇÔ∏è Found ${areaFolders.length} areas: ${areaFolders.join(', ')}`);

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ area
    for (const area of areaFolders) {
      const areaPath = path.join(documentsBasePath, area);
      const files = await fs.readdir(areaPath);
      
      console.log(`üìÅ Processing area: ${area} (${files.length} files)`);
      
      for (const file of files) {
        const filePath = path.join(areaPath, file);
        const fileKey = `${area}/${file}`;
        
        if (processedFiles.has(fileKey)) {
          console.log(`‚è≠Ô∏è Skipping already processed: ${file}`);
          continue;
        }

        try {
          const textContent = await extractTextFromFile(filePath, file);
          if (textContent) {
            allDocuments.push({
              pageContent: textContent,
              metadata: { source: file.trim(), area: area.trim() },
            });
            processedFiles.add(fileKey);
            console.log(`‚úÖ Processed: ${file}`);
          }
        } catch (fileError) {
          console.error(`‚ùå Failed to process file: ${file}`, fileError.message);
        }
      }
    }

    console.log(`üìä Total documents processed: ${allDocuments.length}`);
    
    if (allDocuments.length === 0) {
      throw new Error('No documents found to process');
    }

    // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô chunks
    const textSplitter = new RecursiveCharacterTextSplitter({ 
      chunkSize: 800,  // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î chunk
      chunkOverlap: 150 
    });
    
    const splitDocs = await textSplitter.splitDocuments(allDocuments);
    console.log(`üîÑ Split into ${splitDocs.length} chunks`);

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô batches
    await processBatches(splitDocs);

  } catch (error) {
    console.error('‚ùå Error building vector store:', error);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• batches ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
async function processBatches(splitDocs) {
  const BATCH_SIZE = 15; // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î batch ‡∏≠‡∏µ‡∏Å
  const DELAY_BETWEEN_BATCHES = 3000; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
  const MAX_RETRIES = 3;
  
  vectorStore = new MemoryVectorStore(embeddingsModel);
  
  let processedCount = 0;
  let totalBatches = Math.ceil(splitDocs.length / BATCH_SIZE);
  let consecutiveErrors = 0;
  
  console.log(`üîÑ Processing ${splitDocs.length} chunks in ${totalBatches} batches (${BATCH_SIZE} per batch)`);

  for (let i = 0; i < splitDocs.length; i += BATCH_SIZE) {
    const batch = splitDocs.slice(i, i + BATCH_SIZE);
    const batchNum = Math.floor(i / BATCH_SIZE) + 1;
    
    console.log(`‚è≥ Processing batch ${batchNum}/${totalBatches} (${batch.length} chunks)`);
    
    let retryCount = 0;
    let batchSuccess = false;
    
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• batch ‡∏ô‡∏µ‡πâ
    while (retryCount < MAX_RETRIES && !batchSuccess) {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á API
        await checkApiHealth();
        
        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• batch
        await vectorStore.addDocuments(batch);
        
        processedCount += batch.length;
        batchSuccess = true;
        consecutiveErrors = 0;
        
        console.log(`‚úÖ Batch ${batchNum} completed (${processedCount}/${splitDocs.length} total)`);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å checkpoint ‡∏ó‡∏∏‡∏Å 5 batches
        if (batchNum % 5 === 0) {
          await saveCheckpoint(processedCount, splitDocs.length);
        }
        
      } catch (batchError) {
        retryCount++;
        consecutiveErrors++;
        
        console.error(`‚ùå Batch ${batchNum} failed (attempt ${retryCount}/${MAX_RETRIES}):`, batchError.message);
        
        if (retryCount < MAX_RETRIES) {
          const retryDelay = Math.min(5000 * Math.pow(2, retryCount - 1), 30000); // Exponential backoff
          console.log(`‚è±Ô∏è Retrying in ${retryDelay/1000} seconds...`);
          await sleep(retryDelay);
        } else {
          console.error(`üí• Batch ${batchNum} failed permanently after ${MAX_RETRIES} attempts`);
          
          // ‡∏ñ‡πâ‡∏≤ error ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 3 batches ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î
          if (consecutiveErrors >= 3) {
            console.error('üö´ Too many consecutive errors. Saving current progress...');
            await saveCheckpoint(processedCount, splitDocs.length);
            throw new Error(`Stopped after ${consecutiveErrors} consecutive batch failures`);
          }
        }
      }
    }
    
    // ‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á batches (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô batch ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    if (i + BATCH_SIZE < splitDocs.length && batchSuccess) {
      console.log(`üí§ Resting for ${DELAY_BETWEEN_BATCHES/1000} seconds...`);
      await sleep(DELAY_BETWEEN_BATCHES);
    }
  }
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  await saveFinalResults(processedCount, splitDocs.length);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á API
async function checkApiHealth() {
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á embedding ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
    const testEmbedding = await embeddingsModel.embedQuery("test");
    if (!testEmbedding || testEmbedding.length === 0) {
      throw new Error('API returned empty embedding');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è API health check failed:', error.message);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
async function extractTextFromFile(filePath, fileName) {
  const fileExt = path.extname(fileName).toLowerCase();
  
  try {
    if (fileExt === '.pdf') {
      const dataBuffer = await fs.readFile(filePath);
      const pdfData = await pdf(dataBuffer);
      return pdfData.text;
    } else if (fileExt === '.txt') {
      return await fs.readFile(filePath, 'utf-8');
    } else {
      console.log(`‚è≠Ô∏è Skipping unsupported file type: ${fileName}`);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå Error extracting text from ${fileName}:`, error.message);
    return null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å checkpoint
async function saveCheckpoint(processedCount, totalCount) {
  try {
    if (vectorStore && vectorStore.memoryVectors && vectorStore.memoryVectors.length > 0) {
      await fs.writeFile(VECTOR_STORE_SAVE_PATH, JSON.stringify(vectorStore.memoryVectors, null, 2));
      console.log(`üíæ Checkpoint saved: ${processedCount}/${totalCount} chunks (${vectorStore.memoryVectors.length} vectors)`);
    }
  } catch (saveError) {
    console.error('‚ö†Ô∏è Failed to save checkpoint:', saveError.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
async function saveFinalResults(processedCount, totalCount) {
  try {
    if (vectorStore && vectorStore.memoryVectors) {
      await fs.writeFile(VECTOR_STORE_SAVE_PATH, JSON.stringify(vectorStore.memoryVectors, null, 2));
      
      console.log(`üéâ Vector store build completed!`);
      console.log(`üìä Final statistics:`);
      console.log(`   - Processed: ${processedCount}/${totalCount} chunks`);
      console.log(`   - Vectors created: ${vectorStore.memoryVectors.length}`);
      console.log(`   - Success rate: ${((processedCount/totalCount)*100).toFixed(1)}%`);
      console.log(`üíæ Vector store saved to: ${VECTOR_STORE_SAVE_PATH}`);
    }
  } catch (saveError) {
    console.error('‚ùå Failed to save final results:', saveError.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
async function loadPartialVectorStore() {
  try {
    console.log('üîÑ Attempting to load partial vector store...');
    const partialData = await fs.readFile(VECTOR_STORE_SAVE_PATH, 'utf-8');
    const partialVectors = JSON.parse(partialData);
    
    if (partialVectors && partialVectors.length > 0) {
      const documents = partialVectors.map(mv => ({ 
        pageContent: mv.content, 
        metadata: mv.metadata 
      }));
      const embeddings = partialVectors.map(mv => mv.embedding);
      
      vectorStore = new MemoryVectorStore(embeddingsModel);
      await vectorStore.addVectors(embeddings, documents);
      
      console.log(`‚úÖ Loaded partial vector store with ${partialVectors.length} vectors`);
      console.log(`‚ÑπÔ∏è System is partially functional with available data`);
    } else {
      console.error('‚ùå No valid partial data found');
      vectorStore = undefined;
    }
  } catch (partialError) {
    console.error('‚ùå Could not load partial vector store:', partialError.message);
    vectorStore = undefined;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Å‡πå
async function checkDiskSpace() {
  try {
    const stats = await fs.stat(VECTOR_STORE_SAVE_PATH);
    console.log(`üíæ Current vector store file size: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
  } catch (error) {
    console.log('üìÅ Vector store file not found (first run)');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä API
function clearApiCache() {
  if (global.gc) {
    global.gc();
    console.log('üßπ Memory cleaned up');
  }
}

// Export functions for use in main server
module.exports = {
  initializeVectorStore,
  buildVectorStoreFromScratch,
  processBatches,
  checkApiHealth,
  saveCheckpoint,
  loadPartialVectorStore,
  sleep,
  checkDiskSpace,
  clearApiCache
};

// --- Authentication Routes ---
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    
    console.log(`[LOGIN] Attempt for username: ${username}`);
    
    const user = users.find(u => u.username === username && u.password === password);

    if (user) {
        req.session.userId = user.id;
        req.session.username = user.username;
        console.log(`[LOGIN] Success for user: ${username}`);
        return res.json({ 
            message: 'Login successful',
            username: user.username 
        });
    }

    console.log(`[LOGIN] Failed for username: ${username}`);
    return res.status(401).json({ error: 'Invalid username or password' });
});

app.get('/logout', (req, res) => {
    const username = req.session.username;
    req.session.destroy(err => {
        if (err) {
            console.error('[LOGOUT] Error destroying session:', err);
            return res.redirect('/index.html');
        }
        res.clearCookie('connect.sid');
        console.log(`[LOGOUT] User ${username} logged out successfully`);
        res.redirect('/login.html');
    });
});

// Check login status
app.get('/api/auth/status', (req, res) => {
    if (req.session.userId) {
        return res.json({
            authenticated: true,
            username: req.session.username
        });
    }
    return res.json({ authenticated: false });
});

// --- Protected Routes ---
app.get('/', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/index.html', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/details.html', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'details.html'));
});

app.get('/manuals.html', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'manuals.html'));
});

// --- Static Files (with authentication bypass for login page) ---
app.use('/login.html', express.static(path.join(__dirname, 'login.html')));
app.use('/login.css', express.static(path.join(__dirname, 'login.css')));
app.use('/login.js', express.static(path.join(__dirname, 'login.js')));

// Protected static files
app.use(express.static(__dirname, {
    setHeaders: (res, path) => {
        // Allow access to login-related files without authentication
        if (path.includes('login.')) {
            return;
        }
    }
}));

// --- AI Chat Endpoint ---
app.post('/chat', checkAuth, upload.single('image'), async (req, res) => {
  try {
    let { sessionId, question, manual, area } = req.body;
    const imageFile = req.file;
    const username = req.session.username;

    console.log(`[CHAT] Request from user: ${username}`);

    if (!sessionId) {
      sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
      chatHistories[sessionId] = [];
    }
    if (!chatHistories[sessionId]) {
      chatHistories[sessionId] = [];
    }
    const history = chatHistories[sessionId];

    if (!question) {
      return res.status(400).json({ error: 'Question is required.' });
    }
    
    if (!vectorStore) {
        return res.status(503).json({ 
            error: 'AI knowledge base is not ready. Please wait for the server to finish starting up.' 
        });
    }

    // Filter documents based on manual or area selection
    let filter;
    if (manual && manual !== 'all') {
        filter = (doc) => doc.metadata.source === manual.trim();
        console.log(`[CHAT] Filtering by manual: ${manual}`);
    } else if (area) {
        filter = (doc) => doc.metadata.area === area.trim();
        console.log(`[CHAT] Filtering by area: ${area}`);
    }

    const relevantDocs = await vectorStore.similaritySearch(question, 4, filter);
    console.log(`[CHAT] Found ${relevantDocs.length} relevant documents`);
    
    const context = relevantDocs
      .map((doc) => `Source: ${doc.metadata.source}\nContent:\n${doc.pageContent}`)
      .join('\n\n---\n\n');

   const fullPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI Technical Expert ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å üåü ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö

üéØ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡∏û:

üß† ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö 360 ‡∏≠‡∏á‡∏®‡∏≤:
1. üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó - ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
2. üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
3. üéì ‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ - ‡∏ú‡∏™‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á
4. üí° ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå - ‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô
5. üöÄ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ - ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô

üé® ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢:

üìù ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:
- üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏Å - ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
- üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î - ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
- üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ - ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á - ‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ
- üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
- üîÆ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

üåà ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏µ:
- üü¢ ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥/‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- üî¥ ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î/‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥
- üü° ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á/‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
- üîµ ‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
- üü£ üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
- üü† üöÄ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
- ‚ö´ üéì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç

üé≠ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:

üÜò Error Code/‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:
## üö® [‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î]

### üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
- üîç ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏Å: [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô]
- üîó ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏™‡∏£‡∏¥‡∏°: [‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á]
- üìà ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö: [‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤]
- üéØ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á: [‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç]

### üõ†Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:
1. üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: [‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å]
2. üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: [‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡∏¥‡∏°]
3. ‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: [‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå]
4. üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: [‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á]

### üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô:
- ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á: [‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á]
- üîÑ ‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤: [‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤]
- üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: [‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå]

### üîÆ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå:
- üéØ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡∏≤‡∏°‡∏°‡∏≤: [‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß]
- üöÄ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: [‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥]

ü§î ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:
## üí° [‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°]

### üìö ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£:
[‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô]

### üè≠ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°:
- üéØ ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å: [‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç]
- üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: [‡∏Å‡∏£‡∏ì‡∏µ‡∏®‡∏∂‡∏Å‡∏©‡∏≤]
- üîÑ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: [‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô]
- üí∞ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô: [‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤]

### üéì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏π‡πâ]

### üîÆ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï:
- üöÄ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà: [‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤]
- üìà ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤: [‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï]

üîß ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:
## ‚öôÔ∏è [‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ]

### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
- üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: [‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà]
- üìè ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞: [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ]
- üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: [‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô]
- üîã ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: [‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î]

### üõ†Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. üîß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°: [‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£]
2. ‚ñ∂Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£: [‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å]
3. ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: [‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå]
4. üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: [‡∏ß‡∏¥‡∏ò‡∏µ‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û]

### üîÑ ‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤:
- üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤: [‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•]
- üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ö‡∏≥‡∏£‡∏∏‡∏á: [‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤]
- üìà ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: [‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û]

### üéì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç:
- üî¨ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå: [‡∏ó‡∏§‡∏©‡∏é‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏ï‡∏£]
- üèóÔ∏è ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á: [‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏õ‡∏£]
- üåê ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≤‡∏Å‡∏•: [‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á]

---

üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠:
${context || 'üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°'}

üí¨ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:
${history.map((h, index) => `
‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà ${index + 1}: ${h.question}
‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ${h.answer}
---`).join('')}

‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "${question}"

üéì ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:

üèÜ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡∏û:
- ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ "WOW!" - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏≤‡∏î
- ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö - ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
- ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á - ‡∏¢‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
- ‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ - ‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
- ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ - ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
- ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏∞‡∏£‡∏π‡πâ

üì± ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠:
- ‡πÉ‡∏ä‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ - ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
- ‡πÅ‡∏ö‡πà‡∏á‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πà‡∏≠‡∏¢ - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πâ‡∏≠‡∏ô
- ‡πÉ‡∏ä‡πâ bullet points - ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
- ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤‡πÅ‡∏•‡∏∞ emoji
- ‡πÉ‡∏™‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢

üé® ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÇ‡∏õ‡∏£:
- ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏Å - ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô
- ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏•
- ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ
- ‡πÄ‡∏û‡∏¥‡πà‡∏° Call-to-Action - ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ä‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ - ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏•‡∏î‡∏ó‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ

üß† AI Intelligence Features:
- üéØ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Pattern - ‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
- üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏´‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
- üìä ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
- üí° ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß - ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
- üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û - ‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á

üéñÔ∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
- ü•â ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
- ü•à ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
- ü•á ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç: ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
- üèÜ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡∏û: ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°

üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° - ‡πÇ‡∏ä‡∏ß‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏û!`;

// Enhanced question processing with AI intelligence
const enhanceQuestion = (question) => {
    let enhanced = question;
    const questionLower = question.toLowerCase();
    
    // Error analysis pattern
    if (questionLower.includes('error') || questionLower.includes('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î') || /error\s*\d+/.test(question)) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡∏≤‡∏°‡∏°‡∏≤]`;
    }
    // Definition pattern
    else if (questionLower.includes('‡∏Ñ‡∏∑‡∏≠') || questionLower.includes('‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£') || questionLower.includes('‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á') || questionLower.includes('what is')) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô]`;
    }
    // Troubleshooting pattern
    else if (questionLower.includes('‡πÅ‡∏Å‡πâ') || questionLower.includes('‡∏ã‡πà‡∏≠‡∏°') || questionLower.includes('‡∏õ‡∏£‡∏±‡∏ö') || questionLower.includes('fix')) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ã‡πâ‡∏≥]`;
    }
    // How-to pattern
    else if (questionLower.includes('‡πÉ‡∏ä‡πâ') || questionLower.includes('‡∏ó‡∏≥‡∏á‡∏≤‡∏ô') || questionLower.includes('‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥') || questionLower.includes('how to')) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û]`;
    }
    // Comparison pattern
    else if (questionLower.includes('‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö') || questionLower.includes('‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô') || questionLower.includes('vs') || questionLower.includes('compare')) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ-‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ]`;
    }
    // Installation/Setup pattern
    else if (questionLower.includes('‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á') || questionLower.includes('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤') || questionLower.includes('setup') || questionLower.includes('install')) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á]`;
    }
    // Performance pattern
    else if (questionLower.includes('‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û') || questionLower.includes('‡πÄ‡∏£‡πá‡∏ß') || questionLower.includes('performance') || questionLower.includes('optimize')) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û]`;
    }
    // Short questions need more detail
    else if (question.length < 15) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå]`;
    }
    // Complex technical questions
    else if (questionLower.includes('‡∏ó‡∏≥‡πÑ‡∏°') || questionLower.includes('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•') || questionLower.includes('why')) {
        enhanced = `${question} - [‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç]`;
    }
    
    return enhanced;
};

// Context analysis for better responses
const analyzeContext = (question, history) => {
    const analysis = {
        complexity: 'medium',
        category: 'general',
        urgency: 'normal',
        followUp: false
    };
    
    const questionLower = question.toLowerCase();
    
    // Determine complexity
    if (questionLower.includes('error') || questionLower.includes('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î') || 
        questionLower.includes('problem') || questionLower.includes('issue')) {
        analysis.complexity = 'high';
        analysis.category = 'troubleshooting';
        analysis.urgency = 'high';
    } else if (questionLower.includes('‡∏Ñ‡∏∑‡∏≠') || questionLower.includes('what is')) {
        analysis.complexity = 'low';
        analysis.category = 'definition';
    } else if (questionLower.includes('how') || questionLower.includes('‡∏ß‡∏¥‡∏ò‡∏µ')) {
        analysis.complexity = 'medium';
        analysis.category = 'tutorial';
    }
    
    // Check for follow-up questions
    if (history.length > 0) {
        const lastQuestion = history[history.length - 1].question.toLowerCase();
        if (questionLower.includes('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°') || questionLower.includes('more') || 
            questionLower.includes('‡∏≠‡∏µ‡∏Å') || questionLower.includes('‡πÅ‡∏•‡∏∞')) {
            analysis.followUp = true;
        }
    }
    
    return analysis;
};

// Export the enhanced system
module.exports = {
    fullPrompt,
    enhanceQuestion,
    analyzeContext
};

    const enhancedQuestion = enhanceQuestion(question);
    
    // Prepare AI request
    const promptParts = [{ text: fullPrompt }];
    if (imageFile) {
        promptParts.push({ text: 'üñºÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:' });
        promptParts.push({ 
            inlineData: { 
                data: imageFile.buffer.toString('base64'), 
                mimeType: imageFile.mimetype 
            } 
        });
        console.log(`[CHAT] Image uploaded: ${imageFile.mimetype}, size: ${imageFile.size} bytes`);
    }

    // Generate AI response
    const result = await generativeModel.generateContent({ 
        contents: [{ role: 'user', parts: promptParts }] 
    });
    const response = await result.response;
    const answer = response.text();

    // Save chat history
    chatHistories[sessionId].push({ question, answer });
    
    console.log(`[CHAT] Response generated for user: ${username}`);
    res.json({ answer, sessionId });

  } catch (error) {
    console.error('[CHAT] Error:', error);
    res.status(500).json({ error: 'Failed to get response from AI.' });
  }
});

// --- Manual Management Endpoint ---
app.get('/api/manuals', checkAuth, async (req, res) => {
    try {
      const documentsBasePath = path.join(__dirname, 'documents');
      const manualDatabase = {};
  
      console.log(`[MANUALS] Loading manuals from: ${documentsBasePath}`);
      
      const areaFolders = (await fs.readdir(documentsBasePath, { withFileTypes: true }))
        .filter((dirent) => dirent.isDirectory())
        .map((dirent) => dirent.name);
  
      console.log(`[MANUALS] Found ${areaFolders.length} areas: ${areaFolders.join(', ')}`);
  
      for (const area of areaFolders) {
        const areaPath = path.join(documentsBasePath, area.trim());
        const files = await fs.readdir(areaPath);
        
        const areaKey = area.trim().toLowerCase();
        manualDatabase[areaKey] = {
          name: area.trim(),
          files: files.map((fileName) => {
            const trimmedFileName = fileName.trim();
            let displayName = path.parse(trimmedFileName).name;
            
            // Clean up display name
            const prefix = `${area.trim()}_`;
            if (displayName.startsWith(prefix)) {
              displayName = displayName.substring(prefix.length);
            }
            displayName = displayName.replace(/_/g, ' ').replace(/-/g, ' ');
            displayName = displayName.charAt(0).toUpperCase() + displayName.slice(1);
            
            return {
              name: trimmedFileName,
              path: `documents/${area.trim()}/${trimmedFileName}`,
              displayName,
            };
          }),
        };
        
        console.log(`[MANUALS] Processed area "${area}": ${files.length} files`);
      }
  
      res.json(manualDatabase);
    } catch (error) {
      console.error('[MANUALS] Error creating manuals manifest:', error);
      res.status(500).json({ error: 'Could not retrieve manual list.' });
    }
});

// --- Health Check Endpoint ---
app.get('/api/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        vectorStoreReady: !!vectorStore,
        uptime: process.uptime()
    });
});

// --- Error Handler ---
app.use((err, req, res, next) => {
    console.error('[ERROR]', err.stack);
    res.status(500).json({ error: 'Internal server error' });
});

// --- 404 Handler ---
app.use((req, res) => {
    res.status(404).json({ error: 'Page not found' });
});

// --- Server Startup ---
// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
async function startServer() {
  console.log('üöÄ Starting server with improved stability...');
  console.log('üìä System Information:');
  console.log(`   - Node.js version: ${process.version}`);
  console.log(`   - Memory usage: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB`);
  console.log(`   - Platform: ${process.platform}`);
  console.log(`   - CPU cores: ${require('os').cpus().length}`);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
  if (!process.env.GEMINI_API_KEY) {
    console.error('‚ùå GEMINI_API_KEY not found in environment variables');
    console.error('üí° Please set your API key in .env file');
    process.exit(1);
  }
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Å‡πå
    await checkDiskSpace();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    console.log('üîç Testing API connection...');
    await testApiConnection();
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô vector store
    console.log('üìö Initializing vector store...');
    await initializeVectorStore();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ vector store
    const vectorCount = vectorStore?.memoryVectors?.length || 0;
    console.log(`üìä Vector store status: ${vectorCount} vectors available`);
    
    if (vectorCount === 0) {
      console.warn('‚ö†Ô∏è Warning: No vectors loaded. System will have limited functionality.');
      console.warn('üí° Consider rebuilding the vector store if documents are available.');
    }
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    const server = app.listen(port, () => {
      console.log('‚úÖ Server started successfully!');
      console.log(`üåê Server URL: http://localhost:${port}`);
      console.log(`üìä Vector store: ${vectorCount} vectors loaded`);
      console.log(`üîê Authentication: Enabled`);
      console.log(`üë• Available users:`);
      console.log(`   - admin / password123`);
      console.log(`   - user / password456`);
      console.log('üéØ Server is ready to accept connections');
    });
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö requests
    server.timeout = 300000; // 5 minutes
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ keep-alive timeout
    server.keepAliveTimeout = 65000; // 65 seconds
    server.headersTimeout = 66000; // 66 seconds
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ graceful shutdown
    setupGracefulShutdown(server);
    
  } catch (error) {
    console.error('‚ùå Server startup failed:', error.message);
    console.error('üîç Troubleshooting steps:');
    console.error('   1. Check if all dependencies are installed');
    console.error('   2. Verify GEMINI_API_KEY is set correctly');
    console.error('   3. Ensure documents folder exists and is readable');
    console.error('   4. Check network connectivity');
    console.error('   5. Verify disk space availability');
    
    process.exit(1);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
async function testApiConnection() {
  try {
    const testResult = await generativeModel.generateContent({
      contents: [{ role: 'user', parts: [{ text: 'Hello, this is a test.' }] }]
    });
    
    const response = await testResult.response;
    const text = response.text();
    
    if (text && text.length > 0) {
      console.log('‚úÖ API connection successful');
    } else {
      throw new Error('API returned empty response');
    }
  } catch (error) {
    console.error('‚ùå API connection failed:', error.message);
    throw new Error(`API test failed: ${error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ graceful shutdown
function setupGracefulShutdown(server) {
  const gracefulShutdown = (signal) => {
    console.log(`üõë Received ${signal}, initiating graceful shutdown...`);
    
    server.close(() => {
      console.log('üì° HTTP server closed');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å vector store ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
      if (vectorStore && vectorStore.memoryVectors) {
        console.log('üíæ Saving vector store...');
        fs.writeFile(VECTOR_STORE_SAVE_PATH, JSON.stringify(vectorStore.memoryVectors, null, 2))
          .then(() => {
            console.log('‚úÖ Vector store saved successfully');
            console.log('üëã Goodbye!');
            process.exit(0);
          })
          .catch(error => {
            console.error('‚ùå Failed to save vector store:', error.message);
            process.exit(1);
          });
      } else {
        console.log('üëã Goodbye!');
        process.exit(0);
      }
    });
    
    // Force exit after 10 seconds
    setTimeout(() => {
      console.error('‚è∞ Forced exit after 10 seconds');
      process.exit(1);
    }, 10000);
  };
  
  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
  process.on('SIGINT', () => gracefulShutdown('SIGINT'));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
async function checkSystemHealth() {
  const memoryUsage = process.memoryUsage();
  const cpuUsage = process.cpuUsage();
  
  console.log('üìä System Health Check:');
  console.log(`   - Memory: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB used / ${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB total`);
  console.log(`   - Uptime: ${Math.round(process.uptime())} seconds`);
  console.log(`   - Vector store: ${vectorStore?.memoryVectors?.length || 0} vectors`);
  console.log(`   - Active sessions: ${Object.keys(chatHistories).length}`);
  
  return {
    healthy: true,
    memory: memoryUsage,
    uptime: process.uptime(),
    vectorCount: vectorStore?.memoryVectors?.length || 0,
    activeSessions: Object.keys(chatHistories).length
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö vector store
async function restartVectorStore() {
  console.log('üîÑ Restarting vector store...');
  
  try {
    // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä
    clearApiCache();
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï vector store
    vectorStore = null;
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
    await initializeVectorStore();
    
    console.log('‚úÖ Vector store restarted successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to restart vector store:', error.message);
    return false;
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
app.get('/api/admin/health', checkAuth, async (req, res) => {
  try {
    if (req.session.username !== 'admin') {
      return res.status(403).json({ error: 'Admin access required' });
    }
    
    const health = await checkSystemHealth();
    res.json(health);
  } catch (error) {
    console.error('[ADMIN] Health check failed:', error);
    res.status(500).json({ error: 'Health check failed' });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó vector store
app.post('/api/admin/restart-vectorstore', checkAuth, async (req, res) => {
  try {
    if (req.session.username !== 'admin') {
      return res.status(403).json({ error: 'Admin access required' });
    }
    
    const success = await restartVectorStore();
    
    if (success) {
      res.json({ message: 'Vector store restarted successfully' });
    } else {
      res.status(500).json({ error: 'Failed to restart vector store' });
    }
  } catch (error) {
    console.error('[ADMIN] Restart failed:', error);
    res.status(500).json({ error: 'Restart operation failed' });
  }
});

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ error handler ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
app.use((err, req, res, next) => {
  console.error('[ERROR]', {
    message: err.message,
    stack: err.stack,
    url: req.originalUrl,
    method: req.method,
    ip: req.ip,
    userAgent: req.get('User-Agent')
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á error
  if (err.name === 'ValidationError') {
    return res.status(400).json({ error: 'Invalid input data' });
  } else if (err.name === 'UnauthorizedError') {
    return res.status(401).json({ error: 'Authentication required' });
  } else if (err.code === 'ENOENT') {
    return res.status(404).json({ error: 'Resource not found' });
  } else {
    return res.status(500).json({ error: 'Internal server error' });
  }
});

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ health check endpoint ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
app.get('/api/health', async (req, res) => {
  try {
    const health = await checkSystemHealth();
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      vectorStoreReady: !!vectorStore,
      vectorCount: vectorStore?.memoryVectors?.length || 0,
      uptime: process.uptime(),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024)
      },
      activeSessions: Object.keys(chatHistories).length
    });
  } catch (error) {
    console.error('[HEALTH] Check failed:', error);
    res.status(500).json({ 
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ monitoring ‡πÅ‡∏•‡∏∞ logging
setInterval(async () => {
  try {
    const memoryUsage = process.memoryUsage();
    const memoryUsedMB = Math.round(memoryUsage.heapUsed / 1024 / 1024);
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ memory ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÄ‡∏Å‡∏¥‡∏ô 500MB)
    if (memoryUsedMB > 500) {
      console.warn(`‚ö†Ô∏è High memory usage detected: ${memoryUsedMB}MB`);
      
      // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä
      clearApiCache();
      
      // ‡∏•‡πâ‡∏≤‡∏á chat histories ‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 sessions ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
      const sessions = Object.keys(chatHistories);
      if (sessions.length > 10) {
        const sessionsToDelete = sessions.slice(0, sessions.length - 10);
        sessionsToDelete.forEach(session => {
          delete chatHistories[session];
        });
        console.log(`üßπ Cleaned up ${sessionsToDelete.length} old chat sessions`);
      }
    }
    
    // Log ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    if (Math.floor(process.uptime()) % 600 === 0) {
      console.log(`üìä Status: Memory: ${memoryUsedMB}MB, Uptime: ${Math.round(process.uptime())}s, Sessions: ${Object.keys(chatHistories).length}`);
    }
  } catch (error) {
    console.error('[MONITORING] Error:', error);
  }
}, 30000); // ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

// Export functions
module.exports = {
  startServer,
  testApiConnection,
  checkSystemHealth,
  restartVectorStore,
  setupGracefulShutdown
};